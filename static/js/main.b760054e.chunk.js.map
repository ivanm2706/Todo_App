{"version":3,"sources":["types/LinksPath.ts","components/Footer.tsx","components/Header.tsx","components/TodoInfo.tsx","components/TodoList.tsx","App.tsx","helper/filterTodos.ts","helper/useLocaleStorage.ts","index.tsx"],"names":["LinksPath","filterLinks","title","to","All","Active","Completed","Footer","todos","setTodos","amountCompletedTodos","className","data-cy","length","map","isActive","classNames","selected","replace","some","todo","completed","type","onClick","completedTodos","filter","remove","id","Header","useState","value","setValue","input","useRef","useEffect","current","focus","onSubmit","e","preventDefault","trim","add","Date","now","ref","placeholder","onChange","target","TodoInfo","changeTitle","setChangeTitle","newTitle","setNewTitle","inputNewTitle","checked","currentTodo","stopPropagation","toggle","onDoubleClick","onKeyUp","key","onBlur","TodoList","isCompletedTodo","allCompletedTodos","htmlFor","editing","App","items","filterBy","JSON","parse","window","localStorage","getItem","setData","data","setItem","stringify","makeChange","idTodos","filterTodos","includes","find","useLocaleStorage","useMemo","reduce","acc","curr","location","useLocation","pathname","visibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b760054e.chunk.js","sourcesContent":["// eslint-disable-next-line\nexport enum LinksPath {\n  All = '/',\n  Active = '/active',\n  Completed = '/completed',\n}\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { MakeChange } from '../types/MakeChange';\nimport { Todo } from '../types/Todo';\nimport { LinksPath } from '../types/LinksPath';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: MakeChange,\n  amountCompletedTodos: number,\n};\n\nconst filterLinks = [{\n  title: 'All',\n  to: LinksPath.All,\n}, {\n  title: 'Active',\n  to: LinksPath.Active,\n}, {\n  title: 'Completed',\n  to: LinksPath.Completed,\n}];\n\nexport const Footer: FC<Props> = ({\n  todos,\n  setTodos,\n  amountCompletedTodos,\n}) => {\n  const hendlerRemoveAll = () => {\n    const completedTodos = todos\n      .filter(todo => todo.completed === true);\n\n    setTodos.remove(completedTodos.map(({ id }) => id));\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${todos.length - amountCompletedTodos} items left`}\n      </span>\n\n      <ul className=\"filters\" data-cy=\"todosFilter\">\n        {filterLinks.map(({ title, to }) => (\n          <li key={title}>\n            <NavLink\n              to={to}\n              className={({ isActive }) => classNames(\n                { selected: isActive },\n              )}\n              replace\n            >\n              {title}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n\n      {todos.some(todo => todo.completed === true) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={hendlerRemoveAll}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { MakeChange } from '../types/MakeChange';\n\ntype Props = {\n  setTodos: MakeChange,\n};\n\nexport const Header: React.FC<Props> = ({\n  setTodos,\n}) => {\n  const [value, setValue] = useState('');\n  const input = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    input.current?.focus();\n  }, []);\n\n  const hendlerInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const hendlerForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (value.trim()) {\n      setTodos.add({\n        id: Date.now(),\n        completed: false,\n        title: value,\n      });\n    }\n\n    setValue('');\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={hendlerForm}>\n        <input\n          ref={input}\n          type=\"text\"\n          data-cy=\"createTodo\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={value}\n          onChange={hendlerInput}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, {\n  FC,\n  useRef,\n  useState,\n  useEffect,\n} from 'react';\nimport { MakeChange } from '../types/MakeChange';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  setTodos: MakeChange,\n  changeTitle: number | null,\n  setChangeTitle: React.Dispatch<React.SetStateAction<number | null>>,\n};\n\nexport const TodoInfo: FC<Props> = ({\n  todo,\n  setTodos,\n  changeTitle,\n  setChangeTitle,\n}) => {\n  const [newTitle, setNewTitle] = useState(todo.title);\n  const inputNewTitle = useRef<HTMLInputElement | null>(null);\n  const hendlerRemove = (id: number) => {\n    setTodos.remove([id]);\n  };\n\n  const hendlerToggler = (currentTodo: Todo) => {\n    setTodos.toggle([{ ...currentTodo, completed: !todo.completed }]);\n  };\n\n  const hendlerDoubleClick = (id: number) => setChangeTitle(id);\n\n  const hendlerNewTitle = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => setNewTitle(e.target.value);\n\n  const hendlerKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      if (!newTitle.trim()) {\n        setTodos.remove([todo.id]);\n        setChangeTitle(null);\n\n        return;\n      }\n\n      setTodos.toggle([{ ...todo, title: newTitle }]);\n      setChangeTitle(null);\n\n      return;\n    }\n\n    if (e.key === 'Escape') {\n      setNewTitle(todo.title);\n      setChangeTitle(null);\n    }\n  };\n\n  const hendlerOnBlur = () => {\n    setChangeTitle(null);\n  };\n\n  useEffect(() => inputNewTitle.current?.focus(), [changeTitle]);\n\n  return (\n    <>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onClick={(e) => {\n            e.stopPropagation();\n            hendlerToggler(todo);\n          }}\n        />\n        <p\n          onDoubleClick={() => hendlerDoubleClick(todo.id)}\n        >\n          {todo.title}\n        </p>\n        {/* eslint-disable jsx-a11y/control-has-associated-label */}\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => hendlerRemove(todo.id)}\n        />\n      </div>\n      <input\n        ref={inputNewTitle}\n        type=\"text\"\n        id=\"toggle-view\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={hendlerNewTitle}\n        onKeyUp={hendlerKeyUp}\n        onBlur={hendlerOnBlur}\n      />\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport React, { FC, useState } from 'react';\nimport { MakeChange } from '../types/MakeChange';\nimport { Todo } from '../types/Todo';\nimport { TodoInfo } from './TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: MakeChange,\n  isCompletedTodo: boolean,\n};\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  setTodos,\n  isCompletedTodo,\n}) => {\n  const [changeTitle, setChangeTitle] = useState<number | null>(null);\n\n  const hendlerTogglerAll = () => {\n    let allCompletedTodos = todos\n      .filter(todo => todo.completed === false);\n\n    if (!allCompletedTodos.length) {\n      allCompletedTodos = [...todos];\n    }\n\n    setTodos.toggle(allCompletedTodos.map(todo => (\n      { ...todo, completed: !todo.completed }\n    )));\n  };\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        data-cy=\"toggleAll\"\n        checked={isCompletedTodo}\n        onClick={hendlerTogglerAll}\n      />\n      {/* eslint-disable-next-line */}\n      <label\n        htmlFor=\"toggle-all\"\n      >\n        Mark all as complete\n      </label>\n\n      <ul className=\"todo-list\" data-cy=\"todosList\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              { completed: todo.completed },\n              { editing: changeTitle === todo.id },\n            )}\n          >\n            <TodoInfo\n              todo={todo}\n              setTodos={setTodos}\n              setChangeTitle={setChangeTitle}\n              changeTitle={changeTitle}\n            />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { filterTodos } from './helper/filterTodos';\nimport { useLocaleStorage } from './helper/useLocaleStorage';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useLocaleStorage('todos');\n  const amountCompletedTodos = useMemo(() => {\n    return todos.reduce((acc, curr) => {\n      return curr.completed ? acc + 1 : acc;\n    }, 0);\n  }, [todos]);\n  const { pathname: location } = useLocation();\n  const isCompletedTodo = useMemo(() => {\n    return !todos.some(todo => todo.completed === false);\n  }, [todos]);\n\n  const visibleTodos = filterTodos(todos, location);\n\n  return (\n    <div className=\"todoapp\">\n      <Header\n        setTodos={setTodos}\n      />\n\n      {!todos.length || (\n        <>\n          <TodoList\n            isCompletedTodo={isCompletedTodo}\n            todos={visibleTodos}\n            setTodos={setTodos}\n          />\n          <Footer\n            todos={todos}\n            setTodos={setTodos}\n            amountCompletedTodos={amountCompletedTodos}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { LinksPath } from '../types/LinksPath';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (items: Todo[], filterBy: string) => {\n  if (filterBy === LinksPath.All) {\n    return items;\n  }\n\n  return items.filter(({ completed }) => {\n    switch (filterBy) {\n      case LinksPath.Active:\n        return completed === false;\n\n      case LinksPath.Completed:\n        return completed === true;\n\n      default:\n        return false;\n    }\n  });\n};\n","import { useState } from 'react';\nimport { MakeChange } from '../types/MakeChange';\nimport { Todo } from '../types/Todo';\n\nexport const useLocaleStorage = (key: string): [Todo[], MakeChange] => {\n  const [value, setValue] = useState<Todo[]>(() => {\n    return JSON.parse(window.localStorage.getItem(key) || '[]');\n  });\n\n  const setData = (data: Todo[]) => {\n    setValue(data);\n    window.localStorage.setItem(key, JSON.stringify(data));\n  };\n\n  const makeChange = {\n    add(data: Todo) {\n      setData([...value, data]);\n    },\n\n    remove(idTodos: number[]) {\n      const filterTodos = value.filter(({ id }) => !idTodos.includes(id));\n\n      setData(filterTodos);\n    },\n\n    toggle(items: Todo[]) {\n      const filterTodos = value.map(todo => {\n        const item = items.find(({ id }) => id === todo.id);\n\n        if (item) {\n          return item;\n        }\n\n        return todo;\n      });\n\n      setData(filterTodos);\n    },\n  };\n\n  return [value, makeChange];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}